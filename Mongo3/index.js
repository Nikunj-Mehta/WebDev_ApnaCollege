const express = require("express");
const app = express();
const mongoose = require("mongoose");
const port = 8080;
const path = require("path");
const Chat = require("./models/chat.js");
const methodOverride = require("method-override");
const ExpressError = require("./ExpressError.js");

app.set("views", path.join(__dirname, "views"));
app.set("view engine", "ejs");
app.use(express.static(path.join(__dirname, "public")));
app.use(express.urlencoded({extended: true}));
app.use(methodOverride("_method"));

main().then(() => {
  console.log("Connection successful!");
}).catch((err) => {
  console.log(err);
})

async function main() {
  await mongoose.connect("mongodb://127.0.0.1:27017/fakewhatsapp"); // remove fake.
}

app.get("/", (req, res) => {
  res.send("You are at root route");
});

// Index Route
app.get("/chats", asyncWrap(async (req, res) => {
  let chats = await Chat.find(); // asynchronous function which will return all chats form db and we are storing it in a variable.
  res.render("index.ejs", { chats });
}));

// New chat
app.get("/chats/new", (req, res) => {
  // throw new ExpressError(404, "Page not found"); // normal procedure for not asynchronous error.
  res.render("new.ejs"); // what if on this page user doesn't writes anything, to handel these types of errors we use try-catch blocks.
});

// Create new chat
app.post("/chats", async (req, res, next) => {
  try{ // Here also we can do asyncWrap but left 1 for try-catch example.
    let {from, to, msg} = req.body;
    let newChat = new Chat({
      from: from,
      to: to,
      msg: msg,
      created_at: new Date()
    });

    await newChat.save() // saving new chat to db. But this process is asynchronous but if we are writting .then then there is no need to write await.
    res.redirect("/chats");
  } catch (err) {
    next(err); // this will pass the control to next error handling middleware.(default coustom error handler here)
  }

});

// wrapAsync
function asyncWrap(fn) {
  return function(req, res, next) {
    fn(req, res, next).catch((err) => next(err));
  };
}

// NEW - Show Route
app.get("/chats/:id", 
  asyncWrap(async (req, res, next) => {
 // why this we have if condition ? because the if contiditon only verifies if the id is not in the db, but what if the query entered can't be cased in ._id it is for this we've used try-catch. Instead of writing this try catch multiple times we use asyncWrap.
  let { id } = req.params; // if we send wrong id and executes findById() fn, then by default mongoose returns invalid value in chat rather than generating error.
  let chat = await Chat.findById(id);
  if(!chat) {
    next(new ExpressError(500, "Chat not found")); // In asynchronous function we need to explicityly call next() to avoid any problems.
  }
  res.render("edit.ejs", {chat}); // undefined value passing to edit.ejs, the error will be generated by ejs template ( we need to comment the if block)
}));

// Edit route
app.get("/chats/:id/edit", asyncWrap(async (req, res) => {
 // benefit of this is if any error occurs then the error handler will be called.
  let { id } = req.params;
  let chat = await Chat.findById(id);
  console.log(chat);
  res.render("edit.ejs", { chat });
}));

// Update route
app.put("/chats/:id", asyncWrap(async (req, res) => {

  let { id } = req.params;
  let { msg: newMsg } = req.body;
  let updatedChat = await Chat.findByIdAndUpdate(id, {msg: newMsg }, {runValidators: true, new: true});
  console.log(updatedChat);
  res.redirect("/chats");
}));

// Delete route
app.delete("/chats/:id", asyncWrap(async (req, res) => {
  let { id } = req.params;
  let deletedChat = await Chat.findByIdAndDelete(id, {new: true});
  console.log(deletedChat);
  res.redirect("/chats");
}));

const handelValidationError = (err) => {
  console.log("This is a validation error. Please follow rules");
  console.dir(err.message);
  return err;
}

app.use((err, req, res, next) => {
  console.log(err.name); // To get the name of the error.
  if(err.name === "ValidationError") { // if we want to handel specific error differently.
    err = handelValidationError(err);
  }
  next(err);
});

// Error handling middleware
app.use((err, req, res, next) => {
  let { status=500, message="Some Error Occured" } = err;
  res.status(status).send(message);
});

app.listen(port, () => {
  console.log(`Server is listening on port: ${port}`);
});